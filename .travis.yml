language: cpp

sudo: false

cache:
  ccache: true
  directories:
    - $HOME/.ccache

env:
  global:
    - USE_CCACHE=1
    - CCACHE_COMPRESS=1
    - CCACHE_MAXSIZE=200M
    - CCACHE_CPP2=1

matrix:
  include:

    # 1/ Linux Clang Builds
    - os: linux
      compiler: clang
      addons: &clang37
        apt:
          sources: ['llvm-toolchain-precise-3.7', 'ubuntu-toolchain-r-test']
          packages: ['clang-3.7', 'gfortran', 'python-virtualenv']
      env: CXX_COMPILER='clang++-3.7' C_COMPILER='clang-3.7' Fortran_COMPILER='gfortran' BUILD_TYPE='release'

    - os: linux
      compiler: clang
      addons: *clang37
      env: CXX_COMPILER='clang++-3.7' C_COMPILER='clang-3.7' Fortran_COMPILER='gfortran' BUILD_TYPE='debug'

    # 2/ Linux GCC Builds
    - os: linux
      compiler: gcc
      addons: &gcc49
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.9', 'gcc-4.9', 'gfortran-4.9', 'python-virtualenv']
      env: CXX_COMPILER='g++-4.9' C_COMPILER='gcc-4.9' Fortran_COMPILER='gfortran-4.9' BUILD_TYPE='release'

    - os: linux
      compiler: gcc
      addons: *gcc49
      env: CXX_COMPILER='g++-4.9' C_COMPILER='gcc-4.9' Fortran_COMPILER='gfortran-4.9' BUILD_TYPE='debug' COVERAGE='true'

    - os: linux
      compiler: gcc
      addons: &gcc5
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5', 'gcc-5', 'gfortran-5', 'python-virtualenv']
      env: CXX_COMPILER='g++-5' C_COMPILER='gcc-5' Fortran_COMPILER='gfortran-5' BUILD_TYPE='release'

    - os: linux
      compiler: gcc
      addons: *gcc5
      env: CXX_COMPILER='g++-5' C_COMPILER='gcc-5' Fortran_COMPILER='gfortran-5' BUILD_TYPE='debug'

    # 3/ OSX Clang Builds
    - os: osx
      osx_image: xcode7
      compiler: clang
      env: CXX_COMPILER='clang++' C_COMPILER='clang' Fortran_COMPILER='gfortran' BUILD_TYPE='debug'

    - os: osx
      osx_image: xcode7
      compiler: clang
      env: CXX_COMPILER='clang++' C_COMPILER='clang' Fortran_COMPILER='gfortran' BUILD_TYPE='release'

    # 4/ OSX GCC5 Builds
    - os: osx
      osx_image: xcode7
      compiler: gcc
      env: CXX_COMPILER='g++' C_COMPILER='gcc' Fortran_COMPILER='gfortran' BUILD_TYPE='debug'

    - os: osx
      osx_image: xcode7
      compiler: gcc
      env: CXX_COMPILER='g++' C_COMPILER='gcc' Fortran_COMPILER='gfortran' BUILD_TYPE='release'

install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      cd ${TRAVIS_BUILD_DIR}
      virtualenv --python=python3 venv
      source venv/bin/activate
      curl https://cmake.org/files/v3.12/cmake-3.12.3-Linux-x86_64.tar.gz | tar xz
      export PATH=$PWD/cmake-3.12.3-Linux-x86_64/bin:$PATH
      export LD_LIBARY_PATH=$PWD/cmake-3.12.3-Linux-x86_64/lib:$LD_LIBRARY_PATH
    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew update &> /dev/null
      brew cask uninstall --force oclint
      brew install gcc python pyenv-virtualenv
      brew upgrade cmake
    fi

before_script:
  - cd ${TRAVIS_BUILD_DIR}
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      pip install -r requirements.txt
    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      pip2 install -r requirements.txt
    fi
  - export PATH=$HOME/.local/bin:$PATH
  - |
    if [[ "${COVERAGE}" = true ]]; then
      ./setup --cxx=${CXX_COMPILER} --cc=${C_COMPILER} --fc=${Fortran_COMPILER} --type=${BUILD_TYPE} --coverage
    else
      ./setup --cxx=${CXX_COMPILER} --cc=${C_COMPILER} --fc=${Fortran_COMPILER} --type=${BUILD_TYPE} 
    fi
  - cd build

script:
  - make -j 2
  - ctest -V -j 2
  - cd ..
  - pycodestyle --ignore=E501 test/test.py
  - pycodestyle --ignore=E501 test/valgrind.py
  - cd ${TRAVIS_BUILD_DIR}
  - mkdir test_python_interface
  - cp ${TRAVIS_BUILD_DIR}/test/test.py ${TRAVIS_BUILD_DIR}/test/reference_grid.txt test_python_interface
  - cd test_python_interface
  - pip install ${TRAVIS_BUILD_DIR}
  - pytest test.py
  - |
    if [[ "${VALGRIND}" = true ]]; then
      PYTHONPATH=build pytest -vv test/valgrind.py
    fi

after_success:
  - cd ${TRAVIS_BUILD_DIR}/build
  - |
    if [[ "${COVERAGE}" = true ]]; then
      coveralls -E ".*external.*" -E ".*CMakeFiles.*" -E ".*test/.*.cpp.*" || echo 'coveralls upload failed.'
    fi

notifications:
  email: false
