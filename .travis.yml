language: cpp

sudo: false

cache:
  ccache: true
  directories:
    - $HOME/.ccache

env:
  global:
    - USE_CCACHE=1
    - CCACHE_COMPRESS=1
    - CCACHE_MAXSIZE=200M
    - CCACHE_CPP2=1

matrix:
  include:

    # 1/ Linux Clang Builds
    - os: linux
      compiler: clang
      addons: &clang37
        apt:
          sources: ['llvm-toolchain-precise-3.7', 'ubuntu-toolchain-r-test']
          packages: ['clang-3.7', 'gfortran', 'cmake', 'python-virtualenv']
      env: CXX_COMPILER='clang++-3.7' C_COMPILER='clang-3.7' Fortran_COMPILER='gfortran' BUILD_TYPE='release'

    - os: linux
      compiler: clang
      addons: *clang37
      env: CXX_COMPILER='clang++-3.7' C_COMPILER='clang-3.7' Fortran_COMPILER='gfortran' BUILD_TYPE='debug'

    # 2/ Linux GCC Builds
    - os: linux
      compiler: gcc
      addons: &gcc47
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.7', 'gcc-4.7', 'gfortran-4.7', 'cmake', 'python-virtualenv']
      env: CXX_COMPILER='g++-4.7' C_COMPILER='gcc-4.7' Fortran_COMPILER='gfortran-4.7' BUILD_TYPE='release'

    - os: linux
      compiler: gcc
      addons: *gcc47
      env: CXX_COMPILER='g++-4.7' C_COMPILER='gcc-4.7' Fortran_COMPILER='gfortran-4.7' BUILD_TYPE='debug'

    - os: linux
      compiler: gcc
      addons: &gcc48
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.8', 'gcc-4.8', 'gfortran-4.8', 'cmake', 'python-virtualenv']
      env: CXX_COMPILER='g++-4.8' C_COMPILER='gcc-4.8' Fortran_COMPILER='gfortran-4.8' BUILD_TYPE='release'

    - os: linux
      compiler: gcc
      addons: *gcc48
      env: CXX_COMPILER='g++-4.8' C_COMPILER='gcc-4.8' Fortran_COMPILER='gfortran-4.8' BUILD_TYPE='debug'

    - os: linux
      compiler: gcc
      addons: &gcc49
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.9', 'gcc-4.9', 'gfortran-4.9', 'cmake', 'python-virtualenv']
      env: CXX_COMPILER='g++-4.9' C_COMPILER='gcc-4.9' Fortran_COMPILER='gfortran-4.9' BUILD_TYPE='release'

    - os: linux
      compiler: gcc
      addons: *gcc49
      env: CXX_COMPILER='g++-4.9' C_COMPILER='gcc-4.9' Fortran_COMPILER='gfortran-4.9' BUILD_TYPE='debug'

    - os: linux
      compiler: gcc
      addons: &gcc5
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5', 'gcc-5', 'gfortran-5', 'cmake', 'python-virtualenv']
      env: CXX_COMPILER='g++-5' C_COMPILER='gcc-5' Fortran_COMPILER='gfortran-5' BUILD_TYPE='release'

    - os: linux
      compiler: gcc
      addons: *gcc5
      env: CXX_COMPILER='g++-5' C_COMPILER='gcc-5' Fortran_COMPILER='gfortran-5' BUILD_TYPE='debug'

    # 3/ OSX Clang Builds
    - os: osx
      osx_image: xcode7
      compiler: clang
      env: CXX_COMPILER='clang++' C_COMPILER='clang' Fortran_COMPILER='gfortran' BUILD_TYPE='debug'

    - os: osx
      osx_image: xcode7
      compiler: clang
      env: CXX_COMPILER='clang++' C_COMPILER='clang' Fortran_COMPILER='gfortran' BUILD_TYPE='release'

    # 4/ OSX GCC5 Builds
    - os: osx
      osx_image: xcode7
      compiler: gcc
      env: CXX_COMPILER='g++-5' C_COMPILER='gcc-5' Fortran_COMPILER='gfortran' BUILD_TYPE='debug'

    - os: osx
      osx_image: xcode7
      compiler: gcc
      env: CXX_COMPILER='g++-5' C_COMPILER='gcc-5' Fortran_COMPILER='gfortran' BUILD_TYPE='release'

install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      cd ${TRAVIS_BUILD_DIR}
      virtualenv venv
      source venv/bin/activate
    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew install cmake boost python gcc
    fi

before_script:
  - cd ${TRAVIS_BUILD_DIR}
  - pip install -r requirements.txt
  - export PATH=$HOME/.local/bin:/usr/local/bin:/usr/bin:$PATH
  - git submodule update --init --recursive
  - |
    if [[ "${COVERAGE}" = true ]]; then
      ./setup --cxx=${CXX_COMPILER} --cc=${C_COMPILER} --fc=${Fortran_COMPILER} --type=${BUILD_TYPE} --cmake-options='-Hprojects/CMake' --coverage
    else
      ./setup --cxx=${CXX_COMPILER} --cc=${C_COMPILER} --fc=${Fortran_COMPILER} --type=${BUILD_TYPE} --cmake-options='-Hprojects/CMake'
    fi
  - cd build

script:
  - make -j 2
  - ctest -V -j 2
  - cd ..
  - pep8 --ignore=E501 test/test.py
  - pep8 --ignore=E501 test/valgrind.py
  - py.test -vv test/test.py build
  - |
    if [[ "${VALGRIND}" = true ]]; then
      py.test -vv test/valgrind.py build
    fi

after_success:
  - |
    if [[ "${COVERAGE}" = true ]]; then
      coveralls -E ".*external.*" -E ".*CMakeFiles.*" -E ".*test/.*.cpp.*" -E ".*src/lebedev/.*.cpp.*" || echo 'coveralls upload failed.'
    fi

notifications:
  email: false
