#include "tabulated_exponents.h"
#include "error_handling.h"

std::vector<double> alpha_min_tabulated(const int charge)
{
    switch (charge)
    {
    case 1:
        return {0.0671243724, 0.293467565, 0.772511884};
    case 2:
        return {0.149139365, 0.743108867, 1.95612906};
    case 3:
        return {0.0206434589, 0.0145878375, 0.104231736};
    case 4:
        return {0.0413322544, 0.0292979655, 0.194872657, 0.366942695};
    case 5:
        return {0.0703056262, 0.0496664366, 0.192979801, 0.529163721};
    case 6:
        return {0.103834234, 0.0722603733, 0.30591999, 0.721638135};
    case 7:
        return {0.14229119, 0.097812752, 0.456143189, 1.02136377};
    case 8:
        return {0.186470896, 0.126399016, 0.643284985, 1.40715844};
    case 9:
        return {0.236723371, 0.158072874, 0.866404926, 1.88500537};
    case 10:
        return {0.293186695, 0.192869104, 1.12359377, 2.47554062};
    case 11:
        return {0.0155060604, 0.0146652179, 0.0723794995, 0.720690104};
    case 12:
        return {0.0297564382, 0.0266112074, 0.128034492, 0.241845761};
    case 13:
        return {0.0481455638, 0.0401002471, 0.10830933, 0.277036599};
    case 14:
        return {0.0679314281, 0.0551126608, 0.153325537, 0.321961182};
    case 15:
        return {0.0894037694, 0.0720155791, 0.207120534, 0.424814897};
    case 16:
        return {0.112672292, 0.089984064, 0.267732297, 0.554654445};
    case 17:
        return {0.137854423, 0.108634057, 0.334213688, 0.710734313};
    case 18:
        return {0.165005734, 0.127909136, 0.406250457, 0.899485367};
    case 19:
        return {0.0112857354, 0.0102275849, 0.0472026651, 0.38383899};
    case 20:
        return {0.0201269248, 0.0173705919, 0.0825122551, 0.14869188};
    case 21:
        return {0.0224910074, 0.0189251896, 0.0483821951, 0.0356760335, 0.058390946};
    case 22:
        return {0.0243587229, 0.0203416009, 0.0663265865, 0.098385037, 0.202158221};
    case 23:
        return {0.0260722434, 0.0216608224, 0.0816813754, 0.143236226, 0.302483041};
    case 24:
        return {0.0277480355, 0.0229182057, 0.096100677, 0.18172028, 0.385507624};
    case 25:
        return {0.0293067637, 0.0241277178, 0.110151349, 0.220292522, 0.473114838};
    case 26:
        return {0.0308896826, 0.0252994557, 0.124089509, 0.260133069, 0.565024467};
    case 27:
        return {0.0324642912, 0.0264373645, 0.138050186, 0.301676166, 0.663803944};
    case 28:
        return {0.0340256008, 0.0275481037, 0.152114902, 0.34523676, 0.774680642};
    case 29:
        return {0.0355957396, 0.0286331229, 0.166339036, 0.385526824, 0.905555984};
    case 30:
        return {0.0381012871, 0.029782565, 0.209361233, 0.464703612, 1.0901238};
    case 31:
        return {0.052347117, 0.0399871898, 0.108908959, 0.31768506};
    case 32:
        return {0.0679702298, 0.0523725801, 0.138367632, 0.31589729};
    case 33:
        return {0.0835217158, 0.0652968218, 0.17397397, 0.37938023};
    case 34:
        return {0.100275324, 0.0785965836, 0.21255318, 0.46274966};
    case 35:
        return {0.117878343, 0.0920998554, 0.253829111, 0.56101935};
    case 36:
        return {0.136130944, 0.105671028, 0.296354748, 0.67433115};
    case 37:
        return {0.0101896362, 0.00898776019, 0.0443202372, 0.29526864};
    case 38:
        return {0.0178092267, 0.0160536749, 0.0968010638, 0.122699972};
    case 39:
        return {0.021039942, 0.0177366098, 0.0561996761, 0.03114523, 0.0661553};
    case 40:
        return {0.0232140536, 0.0191991897, 0.0679901154, 0.057960953, 0.1042725};
    case 41:
        return {0.0221201747, 0.020358735, 0.0612639417, 0.09727774, 0.1778521};
    case 42:
        return {0.023269661, 0.0214744982, 0.0712932516, 0.11938733, 0.2301889};
    case 43:
        return {0.028132239, 0.0225219701, 0.101956168, 0.14773173, 0.28623211};
    case 44:
        return {0.0253337817, 0.0234125463, 0.0912490555, 0.1648744, 0.33556911};
    case 45:
        return {0.0262896757, 0.0243126879, 0.101406408, 0.1889554, 0.39171072};
    case 46:
        return {0.0270269194, 0.0250853813, 0.0860887284, 0.1950969, 0.44334194};
    case 47:
        return {0.0279165402, 0.0260013998, 0.12236687, 0.25284034, 0.54291933};
    case 48:
        return {0.0343895456, 0.0268575922, 0.15914603, 0.2798912, 0.5958447};
    case 49:
        return {0.0447969655, 0.0348547075, 0.0886616184, 0.26649742};
    case 50:
        return {0.055350026, 0.0436767301, 0.109938726, 0.24862676};
    case 51:
        return {0.0661020954, 0.053022554, 0.13492964, 0.28988492};
    case 52:
        return {0.0769852295, 0.0626035604, 0.15854467, 0.34378542};
    case 53:
        return {0.0889786351, 0.0724033576, 0.18644465, 0.405977};
    case 54:
        return {0.101342458, 0.0823332857, 0.215222, 0.47672363};
    case 55:
        return {0.0106102307, 0.00758971303, 0.043850211, 0.21096602};
    case 56:
        return {0.015330584, 0.0145643843, 0.0769569954, 0.093863936};
    case 57:
        return {0.0177981908, 0.0158799802, 0.0543753571, 0.089419952, 0.13947419};
    case 58:
        return {0.0181654853, 0.0162453465, 0.0554968947, 0.0660492267, 0.25463491, 0.49506903};
    case 59:
        return {0.0163563932, 0.0157121901, 0.0563198788, 0.0469494403, 0.17387263, 0.33734051};
    case 60:
        return {0.0166890855, 0.0160589563, 0.0569179288, 0.0522129379, 0.19515706, 0.40315525};
    case 61:
        return {0.0169827058, 0.0163928453, 0.0573167716, 0.0568598948, 0.21328802, 0.44796639};
    case 62:
        return {0.0172824204, 0.0167161544, 0.0575380001, 0.061045799, 0.23097145, 0.49501249};
    case 63:
        return {0.01761912, 0.0170597157, 0.0575848023, 0.0648520964, 0.24873409, 0.55815763};
    case 64:
        return {0.0205599358, 0.0183470321, 0.0575060917, 0.0946350583, 0.37060611, 0.72496292};
    case 65:
        return {0.0181186227, 0.0177428264, 0.057238208, 0.0715570261, 0.26800675, 0.57136784};
    case 66:
        return {0.018500677, 0.018076204, 0.0568480669, 0.074524818, 0.27746602, 0.59799038};
    case 67:
        return {0.0188053279, 0.0184314165, 0.0563301015, 0.0772666816, 0.28547287, 0.61910944};
    case 68:
        return {0.0190527946, 0.0187977294, 0.0556802785, 0.0797981351, 0.29246225, 0.63274014};
    case 69:
        return {0.0194193552, 0.019173113, 0.054918149, 0.0821320771, 0.300038, 0.65497074};
    case 70:
        return {0.0197550318, 0.0195318644, 0.0540445392, 0.084277454, 0.30840189, 0.69156598};
    case 71:
        return {0.0237468016, 0.0209728806, 0.0530484201, 0.045857733, 0.077580727};
    case 72:
        return {0.0267729126, 0.0221488058, 0.0610065659, 0.050607023, 0.08873788};
    case 73:
        return {0.0290242612, 0.0232307321, 0.0724452895, 0.066224443, 0.12348499};
    case 74:
        return {0.0309430068, 0.0241814578, 0.0833820662, 0.084739032, 0.16712585};
    case 75:
        return {0.0328513445, 0.0250175901, 0.0941051909, 0.10397999, 0.21324619};
    case 76:
        return {0.0344900771, 0.0259125352, 0.104746313, 0.12329684, 0.25970073};
    case 77:
        return {0.0361515649, 0.0267125639, 0.115376445, 0.1425887, 0.30662893};
    case 78:
        return {0.0377078534, 0.0274782345, 0.126055379, 0.16195139, 0.35481201};
    case 79:
        return {0.0392996891, 0.0282141897, 0.136810745, 0.18145695, 0.40528481};
    case 80:
        return {0.0411919795, 0.0289365113, 0.158951527, 0.21123618, 0.4702346};
    case 81:
        return {0.0501391846, 0.0324958305, 0.0899285125, 0.29751175};
    case 82:
        return {0.058961692, 0.0397592513, 0.106118956, 0.253085016};
    case 83:
        return {0.0679945828, 0.0471368957, 0.126579892, 0.2786258};
    case 84:
        return {0.0767323249, 0.0547226927, 0.148634616, 0.321912863};
    case 85:
        return {0.0859565072, 0.0622057178, 0.171535619, 0.372950677};
    case 86:
        return {0.0927636781, 0.069513636, 0.195078075, 0.43100852};
    case 87:
        return {0.0111329999, 0.00723487907, 0.0500829277, 0.18128096};
    case 88:
        return {0.0156556662, 0.0124964369, 0.0756605274, 0.0975932963};
    case 89:
        return {0.0186719733, 0.0148467776, 0.0392731817, 0.062490802, 0.09713901};
    case 90:
        return {0.0207352474, 0.0159010926, 0.0459558674, 0.086766352, 0.070766381, 1.0194396};
    case 91:
        return {0.0195884943, 0.0154575878, 0.0430136111, 0.065901661, 0.1264197, 0.2220068};
    case 92:
        return {0.0197704118, 0.015628926, 0.0439151099, 0.065683455, 0.1115972, 0.26481992};
    case 93:
        return {0.0208797655, 0.0161512249, 0.0446053997, 0.069542661, 0.11405642, 0.31463032};
    case 94:
        return {0.018622051, 0.0155093629, 0.0448139286, 0.071323178, 0.1204181, 0.3231729};
    case 95:
        return {0.0190199863, 0.0157784528, 0.0448644562, 0.071096204, 0.1131641, 0.3728971};
    case 96:
        return {0.0220619682, 0.0169942712, 0.0446790235, 0.067885786, 0.10589341, 0.4143734};
    case 97:
        return {0.019681103, 0.0162680572, 0.0443691871, 0.067423099, 0.1088956, 0.41996601};
    case 98:
        return {0.0201620071, 0.0164711644, 0.043807844, 0.065686911, 0.10209003, 0.45498004};
    case 99:
        return {0.020318749, 0.0167196035, 0.0430916326, 0.064238189, 0.09821524, 0.48654833};
    case 100:
        return {0.0206805804, 0.0169258466, 0.0421687511, 0.06408687, 0.09456482, 0.51516884};
    case 101:
        return {0.0212479606, 0.0171439074, 0.0411111798, 0.062563857, 0.091407902, 0.5493432};
    case 102:
        return {0.0219728032, 0.0160535688, 0.0399465136, 0.060491743, 0.087030962, 0.5919894};
    case 103:
        return {0.0263669374, 0.0188491543, 0.0387393251, 0.056624034, 0.07377249};
    case 104:
        return {0.0304757109, 0.0210976844, 0.0477935814, 0.053017031, 0.093856888};
    case 105:
        return {0.0333953996, 0.0221217882, 0.0559984349, 0.063399318, 0.11648658};
    case 106:
        return {0.0361857986, 0.0229701555, 0.0637350323, 0.072521335, 0.13892985};
    case 107:
        return {0.0388087935, 0.0237303511, 0.0711874627, 0.080439748, 0.1597789};
    case 108:
        return {0.0416481022, 0.0243988343, 0.0784852668, 0.090174777, 0.18468196};
    case 109:
        return {0.0442890695, 0.0250276988, 0.0856518438, 0.099286277, 0.20882913};
    case 110:
        return {0.0464522004, 0.0255981532, 0.0927361831, 0.10857783, 0.23406925};
    case 111:
        return {0.0504188023, 0.0261387842, 0.0997632043, 0.11946449, 0.26394236};
    case 112:
        return {0.052569715, 0.0266155757, 0.106753088, 0.13057612, 0.29644958};
    case 113:
        return {0.0620374421, 0.0299758777, 0.0918405462, 0.37705173};
    case 114:
        return {0.0682641022, 0.0355595335, 0.0986662349, 0.28533369};
    case 115:
        return {0.0745114508, 0.0414924363, 0.110493343, 0.28693359};
    case 116:
        return {0.0802275885, 0.0473994779, 0.126581305, 0.30677524};
    case 117:
        return {0.0877632229, 0.0531481958, 0.141794524, 0.34333679};
    case 118:
        return {0.09202623, 0.0587591573, 0.160438079, 0.38989109};
    default:
        NUMGRID_ERROR("No entry found in alpha_min_tabulated");
    }
    return {0.0};
}

double alpha_max_tabulated(const int charge)
{
    switch (charge)
    {
    case 1:
        return 901.657212;
    case 2:
        return 2400.72588;
    case 3:
        return 30697.3312;
    case 4:
        return 58320.5813;
    case 5:
        return 89378.8253;
    case 6:
        return 125637.995;
    case 7:
        return 171695.092;
    case 8:
        return 231109.552;
    case 9:
        return 305576.627;
    case 10:
        return 396947.614;
    case 11:
        return 1124117.11;
    case 12:
        return 1869226.38;
    case 13:
        return 2613310.85;
    case 14:
        return 3415304.73;
    case 15:
        return 4307234.04;
    case 16:
        return 5310688.21;
    case 17:
        return 6406368.73;
    case 18:
        return 7566671.24;
    case 19:
        return 27097958.4;
    case 20:
        return 32463353.7;
    case 21:
        return 34544740.9;
    case 22:
        return 37276235.3;
    case 23:
        return 39558482.0;
    case 24:
        return 42372221.4;
    case 25:
        return 44082262.8;
    case 26:
        return 46510436.3;
    case 27:
        return 48220842.0;
    case 28:
        return 50941745.4;
    case 29:
        return 51783688.3;
    case 30:
        return 53943542.5;
    case 31:
        return 55544595.9;
    case 32:
        return 57534344.5;
    case 33:
        return 58403775.4;
    case 34:
        return 59125740.5;
    case 35:
        return 61553220.0;
    case 36:
        return 61799132.3;
    case 37:
        return 80876723.2;
    case 38:
        return 82681877.4;
    case 39:
        return 84351208.8;
    case 40:
        return 84191303.6;
    case 41:
        return 83076752.5;
    case 42:
        return 81859306.7;
    case 43:
        return 83302893.0;
    case 44:
        return 81785831.6;
    case 45:
        return 82100390.1;
    case 46:
        return 81157137.8;
    case 47:
        return 81368610.2;
    case 48:
        return 78907191.7;
    case 49:
        return 78828510.8;
    case 50:
        return 77453440.3;
    case 51:
        return 77533938.1;
    case 52:
        return 74767224.2;
    case 53:
        return 76175651.8;
    case 54:
        return 74842326.4;
    case 55:
        return 74601394.8;
    case 56:
        return 72808696.5;
    case 57:
        return 72833812.3;
    case 58:
        return 72668207.2;
    case 59:
        return 72547637.7;
    case 60:
        return 72499502.3;
    case 61:
        return 71784674.4;
    case 62:
        return 70027996.1;
    case 63:
        return 69855601.5;
    case 64:
        return 68717502.4;
    case 65:
        return 68689158.3;
    case 66:
        return 67554411.6;
    case 67:
        return 67439693.3;
    case 68:
        return 66748154.3;
    case 69:
        return 66673695.8;
    case 70:
        return 65666750.1;
    case 71:
        return 65565013.6;
    case 72:
        return 64738719.0;
    case 73:
        return 64634089.7;
    case 74:
        return 64101881.0;
    case 75:
        return 63598971.8;
    case 76:
        return 62725726.9;
    case 77:
        return 62655707.0;
    case 78:
        return 62342089.2;
    case 79:
        return 62072218.5;
    case 80:
        return 61246900.8;
    case 81:
        return 60806588.6;
    case 82:
        return 60379847.9;
    case 83:
        return 60311989.2;
    case 84:
        return 60413205.8;
    case 85:
        return 60348256.4;
    case 86:
        return 58479848.9;
    case 87:
        return 58419615.8;
    case 88:
        return 58056557.0;
    case 89:
        return 58013075.2;
    case 90:
        return 57354665.4;
    case 91:
        return 57606658.6;
    case 92:
        return 56688626.7;
    case 93:
        return 56938390.8;
    case 94:
        return 56052057.3;
    case 95:
        return 56292159.8;
    case 96:
        return 55844159.6;
    case 97:
        return 55942531.8;
    case 98:
        return 56245072.3;
    case 99:
        return 56971843.3;
    case 100:
        return 57216352.9;
    case 101:
        return 57918574.6;
    case 102:
        return 58629375.7;
    case 103:
        return 59286809.0;
    case 104:
        return 59952678.9;
    case 105:
        return 60574968.1;
    case 106:
        return 61082979.5;
    case 107:
        return 61924864.9;
    case 108:
        return 62525436.7;
    case 109:
        return 63137167.8;
    case 110:
        return 64188305.6;
    case 111:
        return 64532370.0;
    case 112:
        return 65222983.2;
    case 113:
        return 69922936.0;
    case 114:
        return 70468614.8;
    case 115:
        return 71141567.3;
    case 116:
        return 71884619.3;
    case 117:
        return 72893420.5;
    case 118:
        return 73532533.3;
    default:
        NUMGRID_ERROR("No entry found in alpha_max_tabulated");
    }
    return 0.0;
}

int max_l_quantum_number_tabulated(const int charge)
{
    switch (charge)
    {
    case 1:
        return 2;
    case 2:
        return 2;
    case 3:
        return 2;
    case 4:
        return 3;
    case 5:
        return 3;
    case 6:
        return 3;
    case 7:
        return 3;
    case 8:
        return 3;
    case 9:
        return 3;
    case 10:
        return 3;
    case 11:
        return 3;
    case 12:
        return 3;
    case 13:
        return 3;
    case 14:
        return 3;
    case 15:
        return 3;
    case 16:
        return 3;
    case 17:
        return 3;
    case 18:
        return 3;
    case 19:
        return 3;
    case 20:
        return 3;
    case 21:
        return 4;
    case 22:
        return 4;
    case 23:
        return 4;
    case 24:
        return 4;
    case 25:
        return 4;
    case 26:
        return 4;
    case 27:
        return 4;
    case 28:
        return 4;
    case 29:
        return 4;
    case 30:
        return 4;
    case 31:
        return 3;
    case 32:
        return 3;
    case 33:
        return 3;
    case 34:
        return 3;
    case 35:
        return 3;
    case 36:
        return 3;
    case 37:
        return 3;
    case 38:
        return 3;
    case 39:
        return 4;
    case 40:
        return 4;
    case 41:
        return 4;
    case 42:
        return 4;
    case 43:
        return 4;
    case 44:
        return 4;
    case 45:
        return 4;
    case 46:
        return 4;
    case 47:
        return 4;
    case 48:
        return 4;
    case 49:
        return 3;
    case 50:
        return 3;
    case 51:
        return 3;
    case 52:
        return 3;
    case 53:
        return 3;
    case 54:
        return 3;
    case 55:
        return 3;
    case 56:
        return 3;
    case 57:
        return 4;
    case 58:
        return 5;
    case 59:
        return 5;
    case 60:
        return 5;
    case 61:
        return 5;
    case 62:
        return 5;
    case 63:
        return 5;
    case 64:
        return 5;
    case 65:
        return 5;
    case 66:
        return 5;
    case 67:
        return 5;
    case 68:
        return 5;
    case 69:
        return 5;
    case 70:
        return 5;
    case 71:
        return 4;
    case 72:
        return 4;
    case 73:
        return 4;
    case 74:
        return 4;
    case 75:
        return 4;
    case 76:
        return 4;
    case 77:
        return 4;
    case 78:
        return 4;
    case 79:
        return 4;
    case 80:
        return 4;
    case 81:
        return 3;
    case 82:
        return 3;
    case 83:
        return 3;
    case 84:
        return 3;
    case 85:
        return 3;
    case 86:
        return 3;
    case 87:
        return 3;
    case 88:
        return 3;
    case 89:
        return 4;
    case 90:
        return 5;
    case 91:
        return 5;
    case 92:
        return 5;
    case 93:
        return 5;
    case 94:
        return 5;
    case 95:
        return 5;
    case 96:
        return 5;
    case 97:
        return 5;
    case 98:
        return 5;
    case 99:
        return 5;
    case 100:
        return 5;
    case 101:
        return 5;
    case 102:
        return 5;
    case 103:
        return 4;
    case 104:
        return 4;
    case 105:
        return 4;
    case 106:
        return 4;
    case 107:
        return 4;
    case 108:
        return 4;
    case 109:
        return 4;
    case 110:
        return 4;
    case 111:
        return 4;
    case 112:
        return 4;
    case 113:
        return 3;
    case 114:
        return 3;
    case 115:
        return 3;
    case 116:
        return 3;
    case 117:
        return 3;
    case 118:
        return 3;
    default:
        NUMGRID_ERROR("No entry found in max_l_quantum_number_tabulated");
    }
    return 0;
}
