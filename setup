#!/usr/bin/env python

# This file is autogenerated by Autocmake v1.0.0-alpha-x http://autocmake.org
# Copyright (c) 2015-2017 by Radovan Bast, Jonas Juselius, and contributors.

import os
import sys
assert sys.version_info >= (2, 6), 'Python >= 2.6 is required' 

sys.path.insert(0, 'cmake')
from autocmake import configure
from autocmake.external import docopt


options = """
Usage:
  ./setup [options] [<builddir>]
  ./setup (-h | --help)

Options:
  --fc=<FC>                                Fortran compiler [default: gfortran].
  --extra-fc-flags=<EXTRA_FCFLAGS>         Extra Fortran compiler flags [default: ''].
  --fc-support=<FC_SUPPORT>                Toggle Fortran language support (ON/OFF) [default: ON].
  --cxx=<CXX>                              C++ compiler [default: g++].
  --extra-cxx-flags=<EXTRA_CXXFLAGS>       Extra C++ compiler flags [default: ''].
  --python=<PYTHON_INTERPRETER>            The Python interpreter (development version) to use. [default: ''].
  --ccache=<USE_CCACHE>                    Toggle use of ccache <ON/OFF> [default: ON].
  --bindir=<CMAKE_INSTALL_BINDIR>          User executables [default: bin].
  --libdir=<CMAKE_INSTALL_LIBDIR>          Object code libraries [default: lib].
  --includedir=<CMAKE_INSTALL_INCLUDEDIR>  C header files [default: include].
  --datadir=<CMAKE_INSTALL_DATADIR>        Read-only architecture-independent data root [default: share].
  --pydir=<PYMOD_INSTALL_LIBDIR>           Python modules [default: bin]
  --add-definitions=<STRING>               Add preprocesor definitions [default: ''].
  --coverage                               Enable code coverage [default: False].
  --type=<TYPE>                            Set the CMake build type (debug, release, relwithdebinfo, minsizerel) [default: release].
  --generator=<STRING>                     Set the CMake build system generator [default: Unix Makefiles].
  --show                                   Show CMake command and exit.
  --cmake-executable=<CMAKE_EXECUTABLE>    Set the CMake executable [default: cmake].
  --cmake-options=<STRING>                 Define options to CMake [default: ''].
  --prefix=<PATH>                          Set the install path for make install.
  <builddir>                               Build directory.
  -h --help                                Show this screen.
"""


def gen_cmake_command(options, arguments):
    """
    Generate CMake command based on options and arguments.
    """
    command = []
    command.append('FC={0}'.format(arguments['--fc']))
    command.append('CXX={0}'.format(arguments['--cxx']))
    command.append(arguments['--cmake-executable'])
    command.append('-DEXTRA_FCFLAGS="{0}"'.format(arguments['--extra-fc-flags']))
    command.append('-DENABLE_FC_SUPPORT={0}'.format(arguments['--fc-support']))
    command.append('-DEXTRA_CXXFLAGS="{0}"'.format(arguments['--extra-cxx-flags']))
    command.append('-DPYTHON_INTERPRETER="{0}"'.format(arguments['--python']))
    command.append('-DUSE_CCACHE={0}'.format(arguments['--ccache']))
    command.append('-DCMAKE_INSTALL_BINDIR={0}'.format(arguments['--bindir']))
    command.append('-DCMAKE_INSTALL_LIBDIR={0}'.format(arguments['--libdir']))
    command.append('-DCMAKE_INSTALL_INCLUDEDIR={0}'.format(arguments['--includedir']))
    command.append('-DCMAKE_INSTALL_DATADIR={0}'.format(arguments['--datadir']))
    command.append('-DPYMOD_INSTALL_LIBDIR={0}'.format(arguments['--pydir']))
    command.append('-DPREPROCESSOR_DEFINITIONS="{0}"'.format(arguments['--add-definitions']))
    command.append('-DENABLE_CODE_COVERAGE={0}'.format(arguments['--coverage']))
    command.append('-DCMAKE_BUILD_TYPE={0}'.format(arguments['--type']))
    command.append('-G "{0}"'.format(arguments['--generator']))
    if arguments['--cmake-options'] != "''":
        command.append(arguments['--cmake-options'])
    if arguments['--prefix']:
        command.append('-DCMAKE_INSTALL_PREFIX="{0}"'.format(arguments['--prefix']))

    return ' '.join(command)


# parse command line args
try:
    arguments = docopt.docopt(options, argv=None)
except docopt.DocoptExit:
    sys.stderr.write('ERROR: bad input to {0}\n'.format(sys.argv[0]))
    sys.stderr.write(options)
    sys.exit(-1)


# use extensions to validate/post-process args
if configure.module_exists('extensions'):
    import extensions
    arguments = extensions.postprocess_args(sys.argv, arguments)


root_directory = os.path.dirname(os.path.realpath(__file__))


build_path = arguments['<builddir>']


# create cmake command
cmake_command = '{0} {1}'.format(gen_cmake_command(options, arguments), root_directory)


# run cmake
configure.configure(root_directory, build_path, cmake_command, arguments['--show'])
